#! /usr/local/bin/perl
# settime
# by Brian P. Giroux
#
#$ DATA STRUCTURES
#$
#$ $ntpdate => Path, filename, and command line options of ntpdate command.
#$ $config_file => Path and filename of YAML formated config and data file.
#$ $test => Set to true when testing (debugging).
#$ $options => Reference to annonymous array read from document 1 of $config_file.
#$ $ntpsites => Reference to annonymous array read from document 2 of $config_file.
#$ @picklist => This array contains a list of all the "candidates" to choose from. Each candidate is identified by its index number in the annonymous array refered to by $ntpsites. As candidates are removed from eligibility (either because they were identified as an unwanted candidate or because they have been chosen and must be removed to avoid duplication), their @picklist element can be removed without afecting the $ntpsites array.
#$ @chosen => This array contains a list of the chosen candidates. As with the @picklist array, this array identifies the chosen candidates by their index numbers in the annonymous array refered to by $ntpsites.
#$

use strict;
use warnings;
use YAML qw'LoadFile Dump';
use List::Util qw(shuffle max min);

#- Set the default options
#-
my $ntpdate     = "/usr/local/bin/ntpdate -q ";
my $config_file = '/etc/settime.yml';
my $test        = 0;

my $counter;    # a general purpose counter

#- Read the config file
#-
my ( $options, $ntpsites ) = LoadFile($config_file);

#- Choose the sites to query
#-
#-

#- Build the initial list
#-
my @picklist;    # array containing ntp sites to choose from
my @chosen;      # array containing chosen ntp sites

$#picklist = $#$ntpsites;
for ( my $i = 0 ; $i <= $#picklist ; $i++ ) {
    $picklist[$i] = $i;
}

printpicklist("Before processing {bwlist}") if $test;

#- Process the 'bwlist' (black list and white list) part of the options document
#-
if ( exists $options->{bwlist} && defined $options->{bwlist} ) {
    for ( my $i = 0 ; $i <= $#{ $options->{bwlist} } ; $i++ ) {
        if (   exists $options->{bwlist}[$i]{qty}
            && defined $options->{bwlist}[$i]{qty}
            && exists $options->{bwlist}[$i]{key}
            && defined $options->{bwlist}[$i]{key}
            && exists $options->{bwlist}[$i]{value}
            && defined $options->{bwlist}[$i]{value} )
        {
            my $k = $options->{bwlist}[$i]{key};
            my $v = $options->{bwlist}[$i]{value};

            #- if the quantity is 0, blacklist matching sites
            if ( $options->{bwlist}[$i]{qty} == 0 ) {
                blacklist(
                    $options->{bwlist}[$i]{key},
                    $options->{bwlist}[$i]{value}
                );
            }

            #- otherwise, choose the desired quantity of matching sites
            else {

                #- find the matching sites
                my @candidates = match_candidates(
                    $options->{bwlist}[$i]{key},
                    $options->{bwlist}[$i]{value}
                );
                if (@candidates) {
                    if ( $options->{bwlist}[$i]{qty} < scalar(@candidates) ) {

                        #- if I have more candidates than I want,
                        #- randomly choose $op..{qty} items
                        my $winner;
                        for (
                            my $c = 0 ;
                            $c < $options->{bwlist}[$i]{qty} ;
                            $c++
                          )
                        {
                            $winner =
                              splice( @candidates,
                                int( rand( scalar(@candidates) ) ), 1 );
                            push(
                                @chosen,
                                splice(
                                    @picklist, canfind( $winner, @picklist ),
                                    1
                                )
                            );
                        }
                    }
                    else {

                        #- otherwise, take em all ($match of them)
                        for ( my $i = $#candidates ; $i >= 0 ; $i-- ) {
                            push(
                                @chosen,
                                splice(
                                    @picklist,
                                    canfind( $candidates[$i], @picklist ), 1
                                )
                            );
                        }
                    }
                }
            }
        }
    }
}

printpicklist("After bwlist") if $test;
printchosen("After bwlist")   if $test;

#- Choose the least often picked (inverse weighted random)
#-
$counter = 0;
$counter = $options->{least_picked}
  if ( exists $options->{least_picked} && defined $options->{least_picked} );
while ( $counter > 0 ) {
    my @tickets;

    #- read each candidate's 'pick' stats
    for ( my $i = 0 ; $i <= $#picklist ; $i++ ) {
        if ( exists $ntpsites->[ $picklist[$i] ]{pick}
            && defined $ntpsites->[ $picklist[$i] ]{pick} )
        {
            $tickets[$i] = $ntpsites->[ $picklist[$i] ]{pick};
        }
        else { $tickets[$i] = 0 }
    }

    #- inverse the ticket quantities
    @tickets = inverse_weight(@tickets);

    if ( min(@tickets) < 1 ) {

        #- if anyone has a 0 weight, give everyone an additional ticket
        foreach my $t (@tickets) { $t++; }
    }

    push( @chosen, splice( @picklist, wrand( buy_tickets(@tickets) ), 1 ) );

    $counter--;
}

printpicklist("After least picked") if $test;
printchosen("After least picked")   if $test;

#- Choose sites with the most hits (weighted random)
#-
$counter = 0;
$counter = $options->{top_success}
  if ( exists $options->{top_success} && defined $options->{top_success} );
while ( $counter > 0 ) {
    my @tickets;

    #- read each candidate's 'success' stats
    for ( my $i = 0 ; $i <= $#picklist ; $i++ ) {
        if ( exists $ntpsites->[ $picklist[$i] ]{success}
            && defined $ntpsites->[ $picklist[$i] ]{success} )
        {
            $tickets[$i] = $ntpsites->[ $picklist[$i] ]{success};
        }
        else { $tickets[$i] = 0; }
    }

    if ( min(@tickets) < 1 ) {

        #- if anyone has a 0 weight, give everyone an additional ticket
        foreach my $t (@tickets) { $t++; }
    }

    push( @chosen, splice( @picklist, wrand( buy_tickets(@tickets) ), 1 ) );
    $counter--;
}

printpicklist("After most hits") if $test;
printchosen("After most hits")   if $test;

#- Choose sites with best hit/pick ratio (weighted random)
#-
$counter = 0;
$counter = $options->{top_successpick_ratio}
  if ( exists $options->{top_successpick_ratio}
    && defined $options->{top_successpick_ratio} );
while ( $counter > 0 ) {
    my @tickets;

    #- read each candidate's 'success' stats
    for ( my $i = 0 ; $i <= $#picklist ; $i++ ) {
        if (   exists $ntpsites->[ $picklist[$i] ]{success}
            && defined $ntpsites->[ $picklist[$i] ]{success}
            && exists $ntpsites->[ $picklist[$i] ]{pick}
            && defined $ntpsites->[ $picklist[$i] ]{pick}
            && $ntpsites->[ $picklist[$i] ]{pick} > 0 )
        {
            $tickets[$i] = int(
                (
                    $ntpsites->[ $picklist[$i] ]{success} /
                      $ntpsites->[ $picklist[$i] ]{pick}
                ) * 1000
            );
        }
        else { $tickets[$i] = 0 }
    }

    if ( min(@tickets) < 1 ) {

        #- if anyone has a 0 weight, give everyone an additional ticket
        foreach my $t (@tickets) { $t++; }
    }

    push( @chosen, splice( @picklist, wrand( buy_tickets(@tickets) ), 1 ) );
    $counter--;
}

printpicklist("After best ratio") if $test;
printchosen("After best ratio")   if $test;

#- Shuffle the chosen
#-
@chosen = shuffle(@chosen);

printchosen("After shuffle") if $test;

#- Simulate a success
#-

my $success = $chosen[ int( rand(@chosen) ) ];
$ntpsites->[$success]{success}++;

#- Update the stats
#-
$options->{iterations}++;
for ( my $i = 0 ; $i <= $#chosen ; $i++ ) {
    $ntpsites->[ $chosen[$i] ]{pick}++;
}

#- Output the stats to screen (for testing)
#-
if ($test) {
    for ( my $i = 0 ; $i <= $#$ntpsites ; $i++ ) {
        print "$i\t$ntpsites->[$i]{url} <$ntpsites->[$i]{ipaddress}> (";
        if ( exists $ntpsites->[$i]{success}
            && defined $ntpsites->[$i]{success} )
        {
            print $ntpsites->[$i]{success};
        }
        else {
            print "??";
        }
        print "/";
        if ( exists $ntpsites->[$i]{pick}
            && defined $ntpsites->[$i]{pick} )
        {
            print $ntpsites->[$i]{pick};
        }
        else {
            print "??";
        }
        print ")\n";
    }
}

#- Write stats to file
# From Perl Cookbook (by Tom Christiansen and Nathan Torkington)
# Recipe 7.17
#-
open( FH, "+<", $config_file ) or die "can't read $config_file: $!";
seek( FH, 0, 0 ) or die "can't seek to start of $config_file: $!";
print FH Dump( $options, $ntpsites ) or die "can't write to $config_file: $!";
truncate( FH, tell(FH) ) or die "can't truncate $config_file: $!";
close(FH) or die "can't close $config_file: $!";

############################################################################
sub ticket_qty {
############################################################################
    my @tickets;
    $#tickets = $#picklist;
    for ( my $i = 0 ; $i <= $#picklist ; $i++ ) {
        if ( exists $ntpsites->[ $picklist[$i] ]{success}
            && defined $ntpsites->[ $picklist[$i] ]{success} )
        {
            $tickets[$i] = $ntpsites->[ $picklist[$i] ]{success};
        }
    }
    return @tickets;
}

# Output @chosen (for testing)
#
############################################################################
sub printchosen {
############################################################################
    my ($msg) = @_;
    print "\@chosen : $msg\n";
    foreach ( my $r = 0 ; $r <= $#chosen ; $r++ ) {
        print "item $r =-> $chosen[$r]\t"
          . "$ntpsites->[$chosen[$r]]{url} "
          . "($ntpsites->[$chosen[$r]]{ipaddress})\n";
    }
    print "\n\n";
}

# Output @picklist (for testing)
#
############################################################################
sub printpicklist {
############################################################################
    my ($msg) = @_;
    print "\@picklist : $msg\n";
    foreach ( my $r = 0 ; $r <= $#picklist ; $r++ ) {
        print "item $r =-> $picklist[$r]\t"
          . "$ntpsites->[$picklist[$r]]{url}\n";
    }
    print "\n\n";
}

############################################################################
sub blacklist {
###########################################################################
    my ( $k, $v ) = @_;
    for ( my $i = $#picklist ; $i >= 0 ; $i-- ) {
        if ( exists $ntpsites->[ $picklist[$i] ]{$k}
            && defined $ntpsites->[ $picklist[$i] ]{$k} )
        {
            splice( @picklist, $i, 1 )
              if ( $ntpsites->[ $picklist[$i] ]{$k} =~ /$v/i );
        }
    }
}

############################################################################
sub canfind {
############################################################################
    my ( $needle, @haystack ) = @_;
    for ( my $i = 0 ; $i <= $#haystack ; $i++ ) {
        return $i if ( $needle == $haystack[$i] );
    }
    return undef;
}

############################################################################
sub match_candidates {
############################################################################
    my ( $k, $v ) = @_;
    my @candidates;
    for ( my $i = 0 ; $i < $#picklist ; $i++ ) {
        push( @candidates, $picklist[$i] )
          if ( exists $ntpsites->[ $picklist[$i] ]{$k}
            && defined $ntpsites->[ $picklist[$i] ]{$k}
            && $ntpsites->[ $picklist[$i] ]{$k} =~ /$v/i );
    }
    return (@candidates);
}

############################################################################
sub inverse_weight {
############################################################################
    my $maxpicks = max(@_);
    my @tickets;
    for ( my $i = 0 ; $i <= $#picklist ; $i++ ) {
        $tickets[$i] = $maxpicks - $_[$i];
    }
    return @tickets;
}

## buy_tickets - converts a list of ticket quantities into a list of ticket offsets
## input : a list of ticket quantities
## output: a list of ticket offsets
##
############################################################################
sub buy_tickets {
############################################################################
    my @offsets;
    $#offsets = $#_;
    $offsets[0] = $_[0] - 1;
    for ( my $i = 1 ; $i <= $#_ ; $i++ ) {
        $offsets[$i] = $offsets[ $i - 1 ] + $_[$i];
    }
    return (@offsets);
}

## wrand - returns a weighted random number
## input : a list of 'ticket' offsets
## output: the number of the ticket holder
##
############################################################################
sub wrand {
############################################################################
    my $winticket = int( rand( $_[$#_] + 1 ) );
    my $winner;
    my $i = 0;
    while ( !defined $winner ) {
        $winner = $i if $winticket <= $_[$i];
        $i++;
    }
    return ($winner);
}

__END__

=head1 NAME

settime - Wrapper for C<ntpdate> (to sync your computer's date and time with an NTP server.



=cut


